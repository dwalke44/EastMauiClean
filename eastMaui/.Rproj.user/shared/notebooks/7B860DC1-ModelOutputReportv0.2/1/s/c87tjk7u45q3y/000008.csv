"0","knitr::opts_chunk$set(echo = FALSE)"
"0","knitr::opts_chunk$set(warning = FALSE)"
"0","library(eastMaui)"
"0","library(tidyverse)"
"2","[37m-- [1mAttaching packages[22m --------------------------------------- tidyverse 1.2.1 --[39m
"
"2","[37m[32mv[37m [34mggplot2[37m 2.2.1     [32mv[37m [34mpurrr  [37m 0.2.4
[32mv[37m [34mtibble [37m 1.4.2     [32mv[37m [34mdplyr  [37m 0.7.4
[32mv[37m [34mtidyr  [37m 0.8.0     [32mv[37m [34mstringr[37m 1.3.0
[32mv[37m [34mreadr  [37m 1.1.1     [32mv[37m [34mforcats[37m 0.3.0[39m
"
"2","[37m-- [1mConflicts[22m ------------------------------------------ tidyverse_conflicts() --
[31mx[37m [34mdplyr[37m::[32mfilter()[37m masks [34mstats[37m::filter()
[31mx[37m [34mdplyr[37m::[32mlag()[37m    masks [34mstats[37m::lag()[39m
"
"0","library(gridExtra)"
"2","
Attaching package: ‘gridExtra’

"
"2","The following object is masked from ‘package:dplyr’:

    combine

"
"0","library(knitr)"
"0","library(readxl)"
"0","library(openxlsx)"
"0","inpath = ""~/Programming/Trutta/HSHEP/EMaui/EMpackage/eastMaui/rawData"""
"0","# required functions"
"0","percent <- function(x, digits = 2, format = ""f"", ...) {"
"0","  paste0(formatC(100 * x, format = format, digits = digits, ...), ""%"")"
"0","}"
"0","allsp.hab = function(x){"
"0","  y = (1-(0.0000681*((100-x)^2) - 0.00032*(100-x)))"
"0","  return(y)  "
"0","}"
"0","ab.hab = function(x){"
"0","  y = (1-(0.00004678*((100-x)^2) + 0.000313*(100-x)))"
"0","  return(y)"
"0","}"
"0","# r input generation"
"0","# "
"0","watersheds = read_excel(paste(inpath, ""/watersheds.xlsx"", sep = """"))"
"0","# Water calculations input"
"0","watershedsWaterInput = watersheds[ ,c(1,2,8)]"
"0","waterInput.mat= as.matrix(watershedsWaterInput)"
"0","# Habitat calculations input matrix"
"0","habitatInput.mat = data.matrix(watersheds)"
"0","habitatInput.mat = habitatInput.mat[, -6]"
"0","# nodes.compare = eastMaui::nodes1"
"0","nodes = read_excel(paste(inpath, ""/DiversionInputMix5.xlsx"", sep = """"))"
"0","nodes = nodes[ ,-c(2:7)]"
"0","nodes0 = read_excel(paste(inpath, ""/nodes_fulldiv.xlsx"", sep = """"))"
"0","nodes0 = nodes0[ ,-c(2:7)]"
"0","nodes1 = read_excel(paste(inpath, ""/nodes_nodiv.xlsx"", sep = """"))"
"0","nodes1 = nodes1[ ,-c(2:7)]"
"0","nodes.mat = data.matrix(nodes)"
"0","nodes0.mat = data.matrix(nodes0)"
"0","nodes1.mat = data.matrix(nodes1)"
"0","# calc upstream/downstream effect for each node"
"0","# for habitat calculations"
"0","nodesh = nodes"
"0","nodes0h = nodes0"
"0","nodes1h = nodes1"
"0","nodesh$dsImpact = nodesh$DnEntrain*nodesh$DnBarrier*nodesh$DnHab*nodesh$DnOther"
"0","nodes0h$dsImpact = nodes0h$DnEntrain*nodes0h$DnBarrier*nodes0h$DnHab*nodes0h$DnOther"
"0","nodes1h$dsImpact = nodes1h$DnEntrain*nodes1h$DnBarrier*nodes1h$DnHab*nodes1h$DnOther"
"0","nodesh$usImpact = nodesh$UpEntrain*nodesh$UpBarrier*nodesh$UpOther*nodesh$UpHab"
"0","nodes0h$usImpact = nodes0h$UpEntrain*nodes0h$UpBarrier*nodes0h$UpOther*nodes0h$UpHab"
"0","nodes1h$usImpact = nodes1h$UpEntrain*nodes1h$UpBarrier*nodes1h$UpOther*nodes1h$UpHab"
"0","nodesh$passage = nodesh$dsImpact*nodesh$usImpact"
"0","nodes0h$passage = nodes0h$dsImpact*nodes0h$usImpact"
"0","nodes1h$passage = nodes1h$dsImpact*nodes1h$usImpact"
"0","nodesh.mat = data.frame(nodesh)"
"0","nodes0h.mat = data.frame(nodes0h)"
"0","nodes1h.mat = data.frame(nodes1h)"
"0","# --------------------------------------------------"
"0","# Water diversion calculations"
"0","waterInput = waterInput.mat"
"0","sets = c(""inStream"", ""inWshed"", ""inDitch"", ""springs"", ""sinks"", ""WshedCheck"")"
"0","outpath = ""~/Programming/Trutta/HSHEP/EMaui/EMpackage/eastMaui/outputs/"""
"0","# ---------------------------------------------------"
"0","# Run function w/ different scenarios"
"0","test1 = basinWater.fun(nodes.mat, waterInput.mat)"
"0","test2 = basinWater.fun(nodes0.mat, waterInput.mat)"
"0","test3 = basinWater.fun(nodes1.mat, waterInput.mat)"
"0","# ---------------------------------------------------"
"0","instream1 = as.data.frame(test1$inStream)"
"0","instream2 = as.data.frame(test2$inStream)"
"0","instream3 = as.data.frame(test3$inStream)"
"0","instream = bind_rows(instream1, instream2, instream3)"
"0","instream = t(instream)"
"0","colnames(instream)<-c(""mixed"", ""all0"", ""all1"")"
"0","instream = as.data.frame(instream) %>%"
"0","  rownames_to_column(var = ""basinID"") %>%"
"0","  separate(basinID, into = c(""E"", ""Basin""), sep = ""^([E])"")"
"0","instream$Basin = as.numeric(instream$Basin)"
"0","instream = instream[-53,]"
"0","instream[75, 2] = 77"
"0","add206 = c(0,206,0,0,0)"
"0","names(add206) = c(""E"", ""Basin"", ""mixed"", ""all0"", ""all1"")"
"0","instream = rbind(instream, add206)"
"0","add271 = c(0,271,0,0,0)"
"0","names(add271) = c(""E"", ""Basin"", ""mixed"", ""all0"", ""all1"")"
"0","instream = rbind(instream, add271)"
"0","add281 = c(0,281,0,0,0)"
"0","names(add281) = c(""E"", ""Basin"", ""mixed"", ""all0"", ""all1"")"
"0","instream = rbind(instream, add281)"
"0","# ---- habitat calculation inputs----------------------"
"0","instreamh = instream[order(instream$Basin), -1]"
"0","instreamh = remove_rownames(instreamh) "
"0","instreamh.mat = data.matrix(instreamh)"
"0","instreamh.nat = instreamh.mat[ ,4]"
"0","instreamh.0 = instreamh.mat[ ,3]"
"0","instreamh.mix = instreamh.mat[ ,2]"
"0","waterImpactedHab.nat = (instreamh.nat/instreamh.nat)*100"
"0","waterImpactedHab.0 = (instreamh.0/instreamh.nat)*100"
"0","waterImpactedHab.mix = (instreamh.mix/instreamh.nat)*100"
"0","waterImpactedHab.nat[is.na(waterImpactedHab.nat)]<- 0"
"0","waterImpactedHab.0[is.na(waterImpactedHab.0)]<- 0"
"0","waterImpactedHab.mix[is.na(waterImpactedHab.mix)]<- 0"
"0","# waterImpactedHab = waterImpactedHab.mix"
"0","# -----------------------------------------------------"
"0","inwshed1 = as.data.frame(test1$inWshed)"
"0","inwshed2 = as.data.frame(test2$inWshed)"
"0","inwshed3 = as.data.frame(test3$inWshed)"
"0","inwshed = bind_rows(inwshed1, inwshed2, inwshed3)"
"0","inwshed = t(inwshed)"
"0","colnames(inwshed)<-c(""mixed"", ""all0"", ""all1"")"
"0","inwshed = as.data.frame(inwshed) %>%"
"0","  rownames_to_column(var = ""wshedID"") %>%"
"0","  separate(wshedID, into= c(""w"", ""Wshed""), sep = ""^([w])"")"
"0","inwshed$Wshed = as.numeric(inwshed$Wshed)"
"0","inwshed = inwshed[, -1]"
"0","# -----------------------------------------------------"
"0","inditch1 = as.data.frame(test1$inDitch)"
"0","inditch2 = as.data.frame(test2$inDitch)"
"0","inditch3 = as.data.frame(test3$inDitch)"
"0","inditch1[which(inditch1<0)]<- 0"
"0","inditch2[which(inditch2<0)]<- 0"
"0","inditch3[which(inditch3<0)]<- 0"
"0","inditch = bind_rows(inditch1, inditch2, inditch3)"
"0","inditch = t(inditch)"
"0","colnames(inditch)<-c(""mixed"", ""all0"", ""all1"")"
"0","inditch = as.data.frame(inditch) %>%"
"0","  rownames_to_column(var = ""ditchID"") %>%"
"0","  separate(ditchID, into = c(""n"", ""NodeID""), sep = ""^([n])"")"
"0","inditch$NodeID = as.numeric(inditch$NodeID)"
"0","inditch = inditch[ , -1]"
"0","# convert to mgd - millions of gallons per day"
"0","inditch$mixed.mgd = inditch$mixed*0.646317"
"0","inditch$all0.mgd = inditch$all0*0.646317"
"0","inditch$all1.mgd = inditch$all1*0.646317"
"0","# ---------------------------------------------------"
"0","wshedcheck1 = as.data.frame(test1$WshedCheck)"
"0","wshedcheck2 = as.data.frame(test2$WshedCheck)"
"0","wshedcheck3 = as.data.frame(test3$WshedCheck)"
"0","check = bind_rows(wshedcheck1, wshedcheck2, wshedcheck3)"
"0","check = t(check)"
"0","colnames(check)<- c(""mixed"", ""all0"", ""all1"")"
"0","check = as.data.frame(check) %>%"
"0","  rownames_to_column(var = ""wshed"") %>%"
"0","  separate(wshed, into = c(""w"", ""Wshed""), sep = ""^([w])"")"
"0","check$Wshed = as.numeric(check$Wshed)"
"0","check = check[, -1]"
"0","# ----------------------------------------------"
"0","springs1 = as.data.frame(test1$springs)"
"0","springs2 = as.data.frame(test2$springs)"
"0","springs3 = as.data.frame(test3$springs)"
"0","springs = bind_rows(springs1, springs2, springs3)"
"0","springs = t(springs)"
"0","colnames(springs)<- c(""mixed"", ""all0"", ""all1"")"
"0","springs = as.data.frame(springs) %>%"
"0","  rownames_to_column(var = ""springID"") %>%"
"0","  separate(springID, into = c(""E"", ""spring_ID""), sep = ""^([E])"")"
"0","springs = springs[ , -1]"
"0","# ----------------------------------------------"
"0","sinks1 = as.data.frame(test1$sinks)"
"0","sinks2 = as.data.frame(test2$sinks)"
"0","sinks3 = as.data.frame(test3$sinks)"
"0","sinks = bind_rows(sinks1, sinks2, sinks3)"
"0","sinks = t(sinks)"
"0","colnames(sinks)<- c(""mixed"", ""all0"", ""all1"")"
"0","sinks = as.data.frame(sinks) %>%"
"0","  rownames_to_column(var = ""sinkID"") %>%"
"0","  separate(sinkID, into = c(""E"", ""sink_ID""), sep = ""^([E])"")"
"0","sinks = sinks[ , -1]"
"0","# ---------------------------------------------------"
"0","# prep inputs for export to final workbook"
"0","waterOutput = watersheds[ ,-c(17:24)]"
"0","waterOutput = waterOutput[ ,c(1:2, 17:21, 3:16)]"
"0","nodespath = ""~/Programming/Trutta/HSHEP/EMaui/EMpackage/eastMaui/rawData"""
"0","nodesOutput = read_excel(paste(nodespath, ""/nodes_for_output.xlsx"", sep = """"))"
"0","dsNodes = read_excel(paste(nodespath, ""/BasinsAllGroups.xlsx"", sep = """"))"
"0","dsNodes = dsNodes[ ,c(1,2,25)]"
"0","# ---------------------------------------------"
"0","# results"
"0","output_list = list(""watershedsInput"" = waterOutput,"
"0","                   ""diversionsInput"" = nodesOutput,"
"0","                   ""WshedCheck"" = check,"
"0","                   ""inStream"" = instream,"
"0","                   ""inWshed""= inwshed,"
"0","                   ""inDitch"" = inditch,"
"0","                   ""springs"" = springs,"
"0","                   ""sinks"" = sinks)"
"0","file = paste(outpath, ""water_outputs.0.5.xlsx"", sep = """")"
"0","Sys.setenv(""R_ZIPCMD"" = ""C:/RBuildTools/3.4/bin/zip.exe"")"
"0","write.xlsx(output_list, file = file)"
"0","# ---------------------------------------------"
"0","# water modeling key"
"0","waterOutput %>% distinct( WshedID, Wshed_Name ) -> wshedNames"
"0","colnames(nodesOutput)[1]<- ""NodeID"""
"0","nodesInfo = nodesOutput[, c(1,4,6,7)]"
"0","inditch %>% left_join(nodesInfo, by = ""NodeID"") -> nodesOutput0"
"0","nodesOutput0 = nodesOutput0[which(nodesOutput0$DiversionID %in% c(1:10)), ]"
"0","# writexl::write_xlsx(nodesOutput0, path = paste(path, ""/nodes_output_summ.1.0.xlsx"", sep = """"))"
"0","nodesOutput0 %>%"
"0","  group_by(DiversionID) %>%"
"0","  summarise_at(vars(c(2:4)), sum) -> summByDiversion"
"0","leasesByID = waterOutput[ ,c(2,4,7)]"
"0","colnames(dsNodes)[3]<- ""NodeID"""
"0","leases = left_join(dsNodes, leasesByID, by = ""BASINID"") %>%"
"0","  left_join(inditch, by = ""NodeID"") %>%"
"0","  filter(NodeID<45 | NodeID>54) %>%"
"0","  group_by(Lease_ID)"
"0","leases = leases[complete.cases(leases), ]"
"0","leases = leases %>% summarise_at(vars(c(5:7)), sum)"
"0","taro = left_join(dsNodes, leasesByID, by = ""BASINID"") %>%"
"0","  left_join(inditch, by = ""NodeID"") %>%"
"0","  filter(NodeID<45 | NodeID>54) %>%"
"0","  group_by(Taro_ID)"
"0","taro = taro[complete.cases(taro),]"
"0","taro = taro %>% summarise_at(vars(c(5:7)), sum)"
"0","key_list = list(""Watersheds"" = wshedNames,"
"0","                ""Diversion"" = summByDiversion,"
"0","                ""leases"" = leases,"
"0","                ""taro"" = taro)"
"0","file = paste(outpath, ""water_outputs_key.1.1.xlsx"", sep = """")"
"0","Sys.setenv(""R_ZIPCMD"" = ""C:/RBuildTools/3.4/bin/zip.exe"")"
"0","openxlsx::write.xlsx(key_list, file = file)"
"0","# --------------------------------------------"
"0","# --------------------------------------------"
"0","# Habitat Modeling"
"0","htest = basin.fun(nodesh.mat, habitatInput.mat, waterImpactedHab.mix)"
"0","htest1 = basin.fun(nodes1h.mat, habitatInput.mat, waterImpactedHab.nat)"
"0","htest0 = basin.fun(nodes0h.mat, habitatInput.mat, waterImpactedHab.0)"
"0","AllSpHab = as.data.frame(htest$WsedHabAllSp)"
"0","AllSpHab1 = as.data.frame(htest1$WsedHabAllSp)"
"0","AllSpHab0 = as.data.frame(htest0$WsedHabAllSp)"
"0","AllSpHabm = as.tibble(t(AllSpHab))"
"0","AllSpHab1 = as.tibble(t(AllSpHab1))"
"0","AllSpHab0 = as.tibble(t(AllSpHab0))"
"0","ABspHab = as.tibble(htest$WshedHabAB)"
"0","ABspHab1 = as.tibble(htest1$WshedHabAB)"
"0","ABspHab0 = as.tibble(htest0$WshedHabAB)"
"0","ABspHabm = as.tibble(t(ABspHab))"
"0","ABspHab1 = as.tibble(t(ABspHab1))"
"0","ABspHab0 = as.tibble(t(ABspHab0))"
"0","colnames(ABspHabm) = ""AB_sum"""
"0","colnames(ABspHab1) = ""AB_sum"""
"0","colnames(ABspHab0) = ""AB_sum"""
"0","AllSpHab.mix = bind_cols(AllSpHabm, ABspHabm)"
"0","AllSpHab.mix$total = rowSums(AllSpHab.mix)"
"0","AllSpHab.nat = bind_cols(AllSpHab1, ABspHab1) "
"0","AllSpHab.nat$total = rowSums(AllSpHab.nat)"
"0","AllSpHab.0 = bind_cols(AllSpHab0, ABspHab0)"
"0","AllSpHab.0$total = rowSums(AllSpHab.0)"
"0","summWshed = c(1:45)"
"0","natural.total = tibble(summWshed,AllSpHab.nat$total)"
"0","colnames(natural.total)<-c(""WshedID"", ""total.habitat"")"
"0","mix.total = tibble(summWshed,AllSpHab.mix$total)"
"0","colnames(mix.total)<-c(""WshedID"", ""total.habitat"")"
"0","fullDiv.total = tibble(summWshed, AllSpHab.0$total)"
"0","colnames(fullDiv.total)<-c(""WshedID"", ""total.habitat"")"
"0","addDitches = read_excel('~/Programming/Trutta/HSHEP/Emaui/fixNodesDitches.xlsx', sheet = 1)"
"0","colnames(addDitches)<- c(""WshedID"", ""BASINID"", ""NodeID"")"
"0","basinDivs = left_join(addDitches, inditch, by = ""NodeID"" )"
"0","basinDivs[is.na(basinDivs)]<- 0"
"0","basinDivs[6, c(4:6)]= 0"
"0","natural.diversion = basinDivs %>%"
"0","  group_by(WshedID) %>%"
"0","  summarise_at(vars(""all1.mgd""), sum)"
"0","mixed.diversion = basinDivs %>%"
"0","  group_by(WshedID) %>%"
"0","  summarise_at(vars(""mixed.mgd""), sum)"
"0","full.diversion = basinDivs %>%"
"0","  group_by(WshedID) %>%"
"0","  summarise_at(vars(""all0.mgd""), sum)"
"0","natural = left_join(natural.total,natural.diversion, by = ""WshedID"")"
"0","colnames(natural)[c(2,3)]<- c(""Natural.Habitat.Units"", ""no.div.mgd"")"
"0","mixed = left_join(mix.total, mixed.diversion, by = ""WshedID"")"
"0","colnames(mixed)[c(2,3)]<- c(""Mixed.Habitat.Units"", ""mixed.div.mgd"")"
"0","full = left_join(fullDiv.total, full.diversion, by = ""WshedID"")"
"0","colnames(full)[c(2,3)]<- c(""Full.Diversion.Habitat.Units"", ""full.div.mgd"")"
"0","summ = left_join(natural, mixed, by = ""WshedID"") %>% left_join(full, by = ""WshedID"")"
"0","hab_list = list(""Summary"" = summ,"
"0","                ""AllSpeciesHabitat.nat"" = AllSpHab.nat,"
"0","                ""AllSpeciesHabitat.mix"" = AllSpHab.mix,"
"0","                ""AllSpeciesHabitat.0"" = AllSpHab.0)"
"0","file = paste(outpath, ""habitat_outputs.1.1.xlsx"", sep = """")"
"0","Sys.setenv(""R_ZIPCMD"" = ""C:/RBuildTools/3.4/bin/zip.exe"")"
"0","openxlsx::write.xlsx(hab_list, file = file)"
